/* tslint:disable */
/* eslint-disable */
/**
 * EvalGuard Reports API
 * API for accessing and querying model evaluation reports.  This API provides access to evaluation reports stored in the EvalGuard system, allowing clients to retrieve specific reports or query reports by various criteria such as model name, evaluation date, or task type. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Error response
 * @export
 * @interface Errorschema
 */
export interface Errorschema {
    /**
     * Error message
     * @type {string}
     * @memberof Errorschema
     */
    'error': string;
    /**
     * Error code
     * @type {string}
     * @memberof Errorschema
     */
    'code'?: string;
    /**
     * Additional error details
     * @type {{ [key: string]: any; }}
     * @memberof Errorschema
     */
    'details'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface GetReportMetrics200Response
 */
export interface GetReportMetrics200Response {
    /**
     * 
     * @type {string}
     * @memberof GetReportMetrics200Response
     */
    'report_id'?: string;
    /**
     * 
     * @type {Array<{ [key: string]: GetReportMetrics200ResponseMetricsInnerValue; }>}
     * @memberof GetReportMetrics200Response
     */
    'metrics'?: Array<{ [key: string]: GetReportMetrics200ResponseMetricsInnerValue; }>;
}
/**
 * 
 * @export
 * @interface GetReportMetrics200ResponseMetricsInnerValue
 */
export interface GetReportMetrics200ResponseMetricsInnerValue {
    /**
     * The metric value
     * @type {number}
     * @memberof GetReportMetrics200ResponseMetricsInnerValue
     */
    'value': number;
    /**
     * Standard error of the metric
     * @type {number}
     * @memberof GetReportMetrics200ResponseMetricsInnerValue
     */
    'stderr'?: number;
}
/**
 * 
 * @export
 * @interface GetThresholds200Response
 */
export interface GetThresholds200Response {
    /**
     * 
     * @type {Array<Threshold>}
     * @memberof GetThresholds200Response
     */
    'thresholds'?: Array<Threshold>;
}
/**
 * A guardrail is a policy or operational constraint that should be applied during  model evaluation or deployment to mitigate risks, enforce quality, or guide behavior.  It can target specific tasks, metrics, or models and is annotated with metadata for  interpretation and traceability. 
 * @export
 * @interface Guardrail
 */
export interface Guardrail {
    /**
     * Globally unique identifier for the guardrail.
     * @type {string}
     * @memberof Guardrail
     */
    'id': string;
    /**
     * Human-readable name of the guardrail.
     * @type {string}
     * @memberof Guardrail
     */
    'name': string;
    /**
     * Detailed explanation of the purpose and logic of the guardrail.
     * @type {string}
     * @memberof Guardrail
     */
    'description'?: string;
    /**
     * Specifies what the guardrail applies to: tasks, metrics, and/or specific models. 
     * @type {Array<GuardrailTargetsInner>}
     * @memberof Guardrail
     */
    'targets': Array<GuardrailTargetsInner>;
    /**
     * Indicates the data flow stage at which the guardrail should be applied: \'input\' for prompt/input constraints, \'output\' for generation constraints,  or \'both\' for end-to-end application. 
     * @type {string}
     * @memberof Guardrail
     */
    'scope': GuardrailScopeEnum;
    /**
     * List of external references (e.g., papers, documentation, implementations)  that support or explain the rationale for this guardrail. 
     * @type {Array<string>}
     * @memberof Guardrail
     */
    'external_references'?: Array<string>;
    /**
     * Implementation guidance or rule description, written in natural language or  pseudocode for how to enforce this guardrail. 
     * @type {string}
     * @memberof Guardrail
     */
    'instructions': string;
}

export const GuardrailScopeEnum = {
    Input: 'input',
    Output: 'output',
    Both: 'both'
} as const;

export type GuardrailScopeEnum = typeof GuardrailScopeEnum[keyof typeof GuardrailScopeEnum];

/**
 * 
 * @export
 * @interface GuardrailTargetsInner
 */
export interface GuardrailTargetsInner {
    /**
     * Task identifier to which the guardrail applies.
     * @type {string}
     * @memberof GuardrailTargetsInner
     */
    'task': string;
    /**
     * List of metric identifiers to which the guardrail applies
     * @type {Array<string>}
     * @memberof GuardrailTargetsInner
     */
    'metrics': Array<string>;
    /**
     * Model identifier this guardrail is scoped to (Optional)
     * @type {string}
     * @memberof GuardrailTargetsInner
     */
    'model'?: string;
}
/**
 * A guardrail is a policy or operational constraint that should be applied during  model evaluation or deployment to mitigate risks, enforce quality, or guide behavior.  It can target specific tasks, metrics, or models and is annotated with metadata for  interpretation and traceability. 
 * @export
 * @interface Guardrailschema
 */
export interface Guardrailschema {
    /**
     * Globally unique identifier for the guardrail.
     * @type {string}
     * @memberof Guardrailschema
     */
    'id': string;
    /**
     * Human-readable name of the guardrail.
     * @type {string}
     * @memberof Guardrailschema
     */
    'name': string;
    /**
     * Detailed explanation of the purpose and logic of the guardrail.
     * @type {string}
     * @memberof Guardrailschema
     */
    'description'?: string;
    /**
     * Specifies what the guardrail applies to: tasks, metrics, and/or specific models. 
     * @type {Array<GuardrailTargetsInner>}
     * @memberof Guardrailschema
     */
    'targets': Array<GuardrailTargetsInner>;
    /**
     * Indicates the data flow stage at which the guardrail should be applied: \'input\' for prompt/input constraints, \'output\' for generation constraints,  or \'both\' for end-to-end application. 
     * @type {string}
     * @memberof Guardrailschema
     */
    'scope': GuardrailschemaScopeEnum;
    /**
     * List of external references (e.g., papers, documentation, implementations)  that support or explain the rationale for this guardrail. 
     * @type {Array<string>}
     * @memberof Guardrailschema
     */
    'external_references'?: Array<string>;
    /**
     * Implementation guidance or rule description, written in natural language or  pseudocode for how to enforce this guardrail. 
     * @type {string}
     * @memberof Guardrailschema
     */
    'instructions': string;
}

export const GuardrailschemaScopeEnum = {
    Input: 'input',
    Output: 'output',
    Both: 'both'
} as const;

export type GuardrailschemaScopeEnum = typeof GuardrailschemaScopeEnum[keyof typeof GuardrailschemaScopeEnum];

/**
 * 
 * @export
 * @interface ListGuardrails200Response
 */
export interface ListGuardrails200Response {
    /**
     * 
     * @type {Array<Guardrail>}
     * @memberof ListGuardrails200Response
     */
    'guardrails'?: Array<Guardrail>;
    /**
     * 
     * @type {PaginationInfo}
     * @memberof ListGuardrails200Response
     */
    'pagination'?: PaginationInfo;
}
/**
 * 
 * @export
 * @interface ListModels200Response
 */
export interface ListModels200Response {
    /**
     * 
     * @type {Array<ModelInfo>}
     * @memberof ListModels200Response
     */
    'models'?: Array<ModelInfo>;
}
/**
 * 
 * @export
 * @interface ListTasks200Response
 */
export interface ListTasks200Response {
    /**
     * 
     * @type {Array<Task>}
     * @memberof ListTasks200Response
     */
    'tasks'?: Array<Task>;
}
/**
 * Error response
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Error message
     * @type {string}
     * @memberof ModelError
     */
    'error': string;
    /**
     * Error code
     * @type {string}
     * @memberof ModelError
     */
    'code'?: string;
    /**
     * Additional error details
     * @type {{ [key: string]: any; }}
     * @memberof ModelError
     */
    'details'?: { [key: string]: any; };
}
/**
 * Information about a model
 * @export
 * @interface ModelInfo
 */
export interface ModelInfo {
    /**
     * Model name
     * @type {string}
     * @memberof ModelInfo
     */
    'name': string;
    /**
     * Model source/organization
     * @type {string}
     * @memberof ModelInfo
     */
    'source': string;
    /**
     * Number of evaluation reports for this model
     * @type {number}
     * @memberof ModelInfo
     */
    'report_count': number;
    /**
     * Date of the most recent evaluation
     * @type {string}
     * @memberof ModelInfo
     */
    'latest_evaluation': string;
}
/**
 * Information about a model
 * @export
 * @interface ModelInfoschema
 */
export interface ModelInfoschema {
    /**
     * Model name
     * @type {string}
     * @memberof ModelInfoschema
     */
    'name': string;
    /**
     * Model source/organization
     * @type {string}
     * @memberof ModelInfoschema
     */
    'source': string;
    /**
     * Number of evaluation reports for this model
     * @type {number}
     * @memberof ModelInfoschema
     */
    'report_count': number;
    /**
     * Date of the most recent evaluation
     * @type {string}
     * @memberof ModelInfoschema
     */
    'latest_evaluation': string;
}
/**
 * Pagination information
 * @export
 * @interface PaginationInfo
 */
export interface PaginationInfo {
    /**
     * Total number of items
     * @type {number}
     * @memberof PaginationInfo
     */
    'total': number;
    /**
     * Number of items per page
     * @type {number}
     * @memberof PaginationInfo
     */
    'limit': number;
    /**
     * Number of items skipped
     * @type {number}
     * @memberof PaginationInfo
     */
    'offset': number;
    /**
     * Whether there are more items available
     * @type {boolean}
     * @memberof PaginationInfo
     */
    'has_more': boolean;
}
/**
 * Pagination information
 * @export
 * @interface PaginationInfoschema
 */
export interface PaginationInfoschema {
    /**
     * Total number of items
     * @type {number}
     * @memberof PaginationInfoschema
     */
    'total': number;
    /**
     * Number of items per page
     * @type {number}
     * @memberof PaginationInfoschema
     */
    'limit': number;
    /**
     * Number of items skipped
     * @type {number}
     * @memberof PaginationInfoschema
     */
    'offset': number;
    /**
     * Whether there are more items available
     * @type {boolean}
     * @memberof PaginationInfoschema
     */
    'has_more': boolean;
}
/**
 * Schema for a report of model evaluation results.
 * @export
 * @interface Report
 */
export interface Report {
    /**
     * Unique report identifier.
     * @type {string}
     * @memberof Report
     */
    'id'?: string;
    /**
     * Flexible key-value metadata about the report generation.
     * @type {{ [key: string]: string; }}
     * @memberof Report
     */
    'metadata'?: { [key: string]: string; };
    /**
     * 
     * @type {ReportContext}
     * @memberof Report
     */
    'context'?: ReportContext;
    /**
     * List of tasks in the report. The keys are the task names.
     * @type {Array<object>}
     * @memberof Report
     */
    'tasks'?: Array<object>;
    /**
     * List of results in the report. The keys are the metric names.
     * @type {Array<object>}
     * @memberof Report
     */
    'results'?: Array<object>;
}
/**
 * Contextual information about the report generation.
 * @export
 * @interface ReportContext
 */
export interface ReportContext {
    /**
     * Name of the model being evaluated.
     * @type {string}
     * @memberof ReportContext
     */
    'model_name'?: string;
    /**
     * Version of the model being evaluated.
     * @type {string}
     * @memberof ReportContext
     */
    'model_source'?: string;
    /**
     * Git hash of the model being evaluated.
     * @type {string}
     * @memberof ReportContext
     */
    'git_hash'?: string;
    /**
     * Timestamp of the report generation.
     * @type {number}
     * @memberof ReportContext
     */
    'date'?: number;
    /**
     * 
     * @type {ReportContextExecution}
     * @memberof ReportContext
     */
    'execution'?: ReportContextExecution;
    /**
     * 
     * @type {ReportContextTools}
     * @memberof ReportContext
     */
    'tools'?: ReportContextTools;
}
/**
 * Execution information about the report generation.
 * @export
 * @interface ReportContextExecution
 */
export interface ReportContextExecution {
    /**
     * Arguments used to instantiate the model.
     * @type {string}
     * @memberof ReportContextExecution
     */
    'model_args_plain'?: string;
    /**
     * Arguments used to instantiate the model.
     * @type {{ [key: string]: string; }}
     * @memberof ReportContextExecution
     */
    'model_args_dict'?: { [key: string]: string; };
}
/**
 * Tools used to generate the report.
 * @export
 * @interface ReportContextTools
 */
export interface ReportContextTools {
    /**
     * 
     * @type {ReportContextToolsLmEval}
     * @memberof ReportContextTools
     */
    'lm_eval'?: ReportContextToolsLmEval;
    /**
     * 
     * @type {ReportContextToolsTransformers}
     * @memberof ReportContextTools
     */
    'transformers'?: ReportContextToolsTransformers;
}
/**
 * lm-eval library used to generate the report.
 * @export
 * @interface ReportContextToolsLmEval
 */
export interface ReportContextToolsLmEval {
    /**
     * 
     * @type {string}
     * @memberof ReportContextToolsLmEval
     */
    'version'?: string;
}
/**
 * Transformers library used to generate the report.
 * @export
 * @interface ReportContextToolsTransformers
 */
export interface ReportContextToolsTransformers {
    /**
     * 
     * @type {string}
     * @memberof ReportContextToolsTransformers
     */
    'version'?: string;
}
/**
 * Paginated list of reports
 * @export
 * @interface ReportList
 */
export interface ReportList {
    /**
     * List of evaluation reports
     * @type {Array<Reportschema>}
     * @memberof ReportList
     */
    'reports': Array<Reportschema>;
    /**
     * 
     * @type {PaginationInfoschema}
     * @memberof ReportList
     */
    'pagination': PaginationInfoschema;
}
/**
 * Paginated list of reports
 * @export
 * @interface ReportListschema
 */
export interface ReportListschema {
    /**
     * List of evaluation reports
     * @type {Array<Reportschema>}
     * @memberof ReportListschema
     */
    'reports': Array<Reportschema>;
    /**
     * 
     * @type {PaginationInfoschema}
     * @memberof ReportListschema
     */
    'pagination': PaginationInfoschema;
}
/**
 * Query parameters for filtering evaluation reports with flexible criteria including model information, tasks and metrics. 
 * @export
 * @interface ReportQuery
 */
export interface ReportQuery {
    /**
     * 
     * @type {ReportQueryQuery}
     * @memberof ReportQuery
     */
    'query': ReportQueryQuery;
}
/**
 * 
 * @export
 * @interface ReportQueryQuery
 */
export interface ReportQueryQuery {
    /**
     * Filter reports by model name (exact match)
     * @type {string}
     * @memberof ReportQueryQuery
     */
    'model_name'?: string;
    /**
     * Filter reports by model source/organization
     * @type {string}
     * @memberof ReportQueryQuery
     */
    'model_source'?: string;
    /**
     * Filter reports containing specific tasks
     * @type {Array<string>}
     * @memberof ReportQueryQuery
     */
    'tasks'?: Array<string>;
    /**
     * Filter reports containing specific metrics
     * @type {Array<string>}
     * @memberof ReportQueryQuery
     */
    'metrics'?: Array<string>;
    /**
     * Filter by specific parameters used for generating the report
     * @type {{ [key: string]: any; }}
     * @memberof ReportQueryQuery
     */
    'report_context'?: { [key: string]: any; };
}
/**
 * Query parameters for filtering evaluation reports with flexible criteria including model information, tasks and metrics. 
 * @export
 * @interface ReportQueryschema
 */
export interface ReportQueryschema {
    /**
     * 
     * @type {ReportQueryQuery}
     * @memberof ReportQueryschema
     */
    'query': ReportQueryQuery;
}
/**
 * Schema for a report of model evaluation results.
 * @export
 * @interface Reportschema
 */
export interface Reportschema {
    /**
     * Unique report identifier.
     * @type {string}
     * @memberof Reportschema
     */
    'id'?: string;
    /**
     * Flexible key-value metadata about the report generation.
     * @type {{ [key: string]: string; }}
     * @memberof Reportschema
     */
    'metadata'?: { [key: string]: string; };
    /**
     * 
     * @type {ReportContext}
     * @memberof Reportschema
     */
    'context'?: ReportContext;
    /**
     * List of tasks in the report. The keys are the task names.
     * @type {Array<object>}
     * @memberof Reportschema
     */
    'tasks'?: Array<object>;
    /**
     * List of results in the report. The keys are the metric names.
     * @type {Array<object>}
     * @memberof Reportschema
     */
    'results'?: Array<object>;
}
/**
 * Schema for a model evaluation task, based on lm-eval report data plus user-added metadata.
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * Unique task identifier.
     * @type {string}
     * @memberof Task
     */
    'id': string;
    /**
     * Human-readable name of the task.
     * @type {string}
     * @memberof Task
     */
    'name': string;
    /**
     * Optional detailed description of the task.
     * @type {string}
     * @memberof Task
     */
    'description'?: string;
    /**
     * Optional category of the task, e.g. \'question_answering\', \'language_modeling\'.
     * @type {string}
     * @memberof Task
     */
    'category'?: string;
    /**
     * List of metric IDs applicable to this task.
     * @type {Array<string>}
     * @memberof Task
     */
    'metrics': Array<string>;
    /**
     * Optional tags for the task, e.g. domain, language, difficulty.
     * @type {Array<string>}
     * @memberof Task
     */
    'tags'?: Array<string>;
    /**
     * Optional list of languages relevant to the task.
     * @type {Array<string>}
     * @memberof Task
     */
    'languages'?: Array<string>;
}
/**
 * Schema for a model evaluation task, based on lm-eval report data plus user-added metadata.
 * @export
 * @interface Taskschema
 */
export interface Taskschema {
    /**
     * Unique task identifier.
     * @type {string}
     * @memberof Taskschema
     */
    'id': string;
    /**
     * Human-readable name of the task.
     * @type {string}
     * @memberof Taskschema
     */
    'name': string;
    /**
     * Optional detailed description of the task.
     * @type {string}
     * @memberof Taskschema
     */
    'description'?: string;
    /**
     * Optional category of the task, e.g. \'question_answering\', \'language_modeling\'.
     * @type {string}
     * @memberof Taskschema
     */
    'category'?: string;
    /**
     * List of metric IDs applicable to this task.
     * @type {Array<string>}
     * @memberof Taskschema
     */
    'metrics': Array<string>;
    /**
     * Optional tags for the task, e.g. domain, language, difficulty.
     * @type {Array<string>}
     * @memberof Taskschema
     */
    'tags'?: Array<string>;
    /**
     * Optional list of languages relevant to the task.
     * @type {Array<string>}
     * @memberof Taskschema
     */
    'languages'?: Array<string>;
}
/**
 * Schema to define interpretation thresholds for metric scores within a task context.
 * @export
 * @interface Threshold
 */
export interface Threshold {
    /**
     * Task ID to which these thresholds apply.
     * @type {string}
     * @memberof Threshold
     */
    'task': string;
    /**
     * Mapping from metric IDs to arrays of threshold ranges and labels.
     * @type {object}
     * @memberof Threshold
     */
    'thresholds': object;
}
/**
 * Schema to define interpretation thresholds for metric scores within a task context.
 * @export
 * @interface Thresholdschema
 */
export interface Thresholdschema {
    /**
     * Task ID to which these thresholds apply.
     * @type {string}
     * @memberof Thresholdschema
     */
    'task': string;
    /**
     * Mapping from metric IDs to arrays of threshold ranges and labels.
     * @type {object}
     * @memberof Thresholdschema
     */
    'thresholds': object;
}

/**
 * GuardrailsApi - axios parameter creator
 * @export
 */
export const GuardrailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a specific guardrail by its unique identifier. Returns the complete guardrail including target scope, instructions, and metadata. 
         * @summary Get guardrail by ID
         * @param {string} guardrailId Unique identifier of the guardrail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGuardrail: async (guardrailId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guardrailId' is not null or undefined
            assertParamExists('getGuardrail', 'guardrailId', guardrailId)
            const localVarPath = `/guardrails/{guardrail_id}`
                .replace(`{${"guardrail_id"}}`, encodeURIComponent(String(guardrailId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of guardrails with optional filtering by tasks and metrics. Guardrails are policies or operational constraints that should be applied during  model evaluation or deployment. 
         * @summary List guardrails
         * @param {string} [tasks] Comma-separated list of task identifiers to filter guardrails
         * @param {string} [metrics] Comma-separated list of metric identifiers to filter guardrails
         * @param {number} [limit] Maximum number of guardrails to return
         * @param {number} [offset] Number of guardrails to skip for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGuardrails: async (tasks?: string, metrics?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/guardrails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tasks !== undefined) {
                localVarQueryParameter['tasks'] = tasks;
            }

            if (metrics !== undefined) {
                localVarQueryParameter['metrics'] = metrics;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuardrailsApi - functional programming interface
 * @export
 */
export const GuardrailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuardrailsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a specific guardrail by its unique identifier. Returns the complete guardrail including target scope, instructions, and metadata. 
         * @summary Get guardrail by ID
         * @param {string} guardrailId Unique identifier of the guardrail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGuardrail(guardrailId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Guardrail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGuardrail(guardrailId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuardrailsApi.getGuardrail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of guardrails with optional filtering by tasks and metrics. Guardrails are policies or operational constraints that should be applied during  model evaluation or deployment. 
         * @summary List guardrails
         * @param {string} [tasks] Comma-separated list of task identifiers to filter guardrails
         * @param {string} [metrics] Comma-separated list of metric identifiers to filter guardrails
         * @param {number} [limit] Maximum number of guardrails to return
         * @param {number} [offset] Number of guardrails to skip for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGuardrails(tasks?: string, metrics?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListGuardrails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGuardrails(tasks, metrics, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuardrailsApi.listGuardrails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GuardrailsApi - factory interface
 * @export
 */
export const GuardrailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuardrailsApiFp(configuration)
    return {
        /**
         * Retrieve a specific guardrail by its unique identifier. Returns the complete guardrail including target scope, instructions, and metadata. 
         * @summary Get guardrail by ID
         * @param {string} guardrailId Unique identifier of the guardrail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGuardrail(guardrailId: string, options?: RawAxiosRequestConfig): AxiosPromise<Guardrail> {
            return localVarFp.getGuardrail(guardrailId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of guardrails with optional filtering by tasks and metrics. Guardrails are policies or operational constraints that should be applied during  model evaluation or deployment. 
         * @summary List guardrails
         * @param {string} [tasks] Comma-separated list of task identifiers to filter guardrails
         * @param {string} [metrics] Comma-separated list of metric identifiers to filter guardrails
         * @param {number} [limit] Maximum number of guardrails to return
         * @param {number} [offset] Number of guardrails to skip for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGuardrails(tasks?: string, metrics?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<ListGuardrails200Response> {
            return localVarFp.listGuardrails(tasks, metrics, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuardrailsApi - object-oriented interface
 * @export
 * @class GuardrailsApi
 * @extends {BaseAPI}
 */
export class GuardrailsApi extends BaseAPI {
    /**
     * Retrieve a specific guardrail by its unique identifier. Returns the complete guardrail including target scope, instructions, and metadata. 
     * @summary Get guardrail by ID
     * @param {string} guardrailId Unique identifier of the guardrail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardrailsApi
     */
    public getGuardrail(guardrailId: string, options?: RawAxiosRequestConfig) {
        return GuardrailsApiFp(this.configuration).getGuardrail(guardrailId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of guardrails with optional filtering by tasks and metrics. Guardrails are policies or operational constraints that should be applied during  model evaluation or deployment. 
     * @summary List guardrails
     * @param {string} [tasks] Comma-separated list of task identifiers to filter guardrails
     * @param {string} [metrics] Comma-separated list of metric identifiers to filter guardrails
     * @param {number} [limit] Maximum number of guardrails to return
     * @param {number} [offset] Number of guardrails to skip for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardrailsApi
     */
    public listGuardrails(tasks?: string, metrics?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return GuardrailsApiFp(this.configuration).listGuardrails(tasks, metrics, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ModelsApi - axios parameter creator
 * @export
 */
export const ModelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of all models that have evaluation reports in the system. Useful for building model selection interfaces. 
         * @summary List available models
         * @param {string} [source] Filter by model source/organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModels: async (source?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModelsApi - functional programming interface
 * @export
 */
export const ModelsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ModelsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of all models that have evaluation reports in the system. Useful for building model selection interfaces. 
         * @summary List available models
         * @param {string} [source] Filter by model source/organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModels(source?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListModels200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModels(source, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelsApi.listModels']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ModelsApi - factory interface
 * @export
 */
export const ModelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ModelsApiFp(configuration)
    return {
        /**
         * Retrieve a list of all models that have evaluation reports in the system. Useful for building model selection interfaces. 
         * @summary List available models
         * @param {string} [source] Filter by model source/organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModels(source?: string, options?: RawAxiosRequestConfig): AxiosPromise<ListModels200Response> {
            return localVarFp.listModels(source, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ModelsApi - object-oriented interface
 * @export
 * @class ModelsApi
 * @extends {BaseAPI}
 */
export class ModelsApi extends BaseAPI {
    /**
     * Retrieve a list of all models that have evaluation reports in the system. Useful for building model selection interfaces. 
     * @summary List available models
     * @param {string} [source] Filter by model source/organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApi
     */
    public listModels(source?: string, options?: RawAxiosRequestConfig) {
        return ModelsApiFp(this.configuration).listModels(source, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a specific evaluation report by its unique identifier. Returns the complete report including context, tasks, and results. 
         * @summary Get evaluation report by ID
         * @param {string} reportId Unique identifier of the report
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReport: async (reportId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('getReport', 'reportId', reportId)
            const localVarPath = `/reports/{report_id}`
                .replace(`{${"report_id"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve only the metrics/results for a specific evaluation report. Useful when you only need the performance data without the full context. 
         * @summary Get metrics for a specific report
         * @param {string} reportId Unique identifier of the report
         * @param {string} [metric] Filter to specific metric(s)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportMetrics: async (reportId: string, metric?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('getReportMetrics', 'reportId', reportId)
            const localVarPath = `/reports/{report_id}/metrics`
                .replace(`{${"report_id"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (metric !== undefined) {
                localVarQueryParameter['metric'] = metric;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of evaluation reports with flexible filtering. Supports filtering by model name, evaluation date range, task type, metrics, dtype, and other criteria. 
         * @summary List evaluation reports
         * @param {ReportQueryschema} reportQueryschema 
         * @param {number} [limit] Maximum number of reports to return
         * @param {number} [offset] Number of reports to skip for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReports: async (reportQueryschema: ReportQueryschema, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportQueryschema' is not null or undefined
            assertParamExists('listReports', 'reportQueryschema', reportQueryschema)
            const localVarPath = `/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportQueryschema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a specific evaluation report by its unique identifier. Returns the complete report including context, tasks, and results. 
         * @summary Get evaluation report by ID
         * @param {string} reportId Unique identifier of the report
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReport(reportId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Report>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReport(reportId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReportsApi.getReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve only the metrics/results for a specific evaluation report. Useful when you only need the performance data without the full context. 
         * @summary Get metrics for a specific report
         * @param {string} reportId Unique identifier of the report
         * @param {string} [metric] Filter to specific metric(s)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportMetrics(reportId: string, metric?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReportMetrics200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportMetrics(reportId, metric, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReportsApi.getReportMetrics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of evaluation reports with flexible filtering. Supports filtering by model name, evaluation date range, task type, metrics, dtype, and other criteria. 
         * @summary List evaluation reports
         * @param {ReportQueryschema} reportQueryschema 
         * @param {number} [limit] Maximum number of reports to return
         * @param {number} [offset] Number of reports to skip for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listReports(reportQueryschema: ReportQueryschema, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listReports(reportQueryschema, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReportsApi.listReports']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * Retrieve a specific evaluation report by its unique identifier. Returns the complete report including context, tasks, and results. 
         * @summary Get evaluation report by ID
         * @param {string} reportId Unique identifier of the report
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReport(reportId: string, options?: RawAxiosRequestConfig): AxiosPromise<Report> {
            return localVarFp.getReport(reportId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve only the metrics/results for a specific evaluation report. Useful when you only need the performance data without the full context. 
         * @summary Get metrics for a specific report
         * @param {string} reportId Unique identifier of the report
         * @param {string} [metric] Filter to specific metric(s)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportMetrics(reportId: string, metric?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetReportMetrics200Response> {
            return localVarFp.getReportMetrics(reportId, metric, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of evaluation reports with flexible filtering. Supports filtering by model name, evaluation date range, task type, metrics, dtype, and other criteria. 
         * @summary List evaluation reports
         * @param {ReportQueryschema} reportQueryschema 
         * @param {number} [limit] Maximum number of reports to return
         * @param {number} [offset] Number of reports to skip for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReports(reportQueryschema: ReportQueryschema, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<ReportList> {
            return localVarFp.listReports(reportQueryschema, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export class ReportsApi extends BaseAPI {
    /**
     * Retrieve a specific evaluation report by its unique identifier. Returns the complete report including context, tasks, and results. 
     * @summary Get evaluation report by ID
     * @param {string} reportId Unique identifier of the report
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public getReport(reportId: string, options?: RawAxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getReport(reportId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve only the metrics/results for a specific evaluation report. Useful when you only need the performance data without the full context. 
     * @summary Get metrics for a specific report
     * @param {string} reportId Unique identifier of the report
     * @param {string} [metric] Filter to specific metric(s)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public getReportMetrics(reportId: string, metric?: string, options?: RawAxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getReportMetrics(reportId, metric, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of evaluation reports with flexible filtering. Supports filtering by model name, evaluation date range, task type, metrics, dtype, and other criteria. 
     * @summary List evaluation reports
     * @param {ReportQueryschema} reportQueryschema 
     * @param {number} [limit] Maximum number of reports to return
     * @param {number} [offset] Number of reports to skip for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public listReports(reportQueryschema: ReportQueryschema, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return ReportsApiFp(this.configuration).listReports(reportQueryschema, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TasksApi - axios parameter creator
 * @export
 */
export const TasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of all evaluation tasks available in the system. Useful for building task selection interfaces. 
         * @summary List available tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTasks: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TasksApi - functional programming interface
 * @export
 */
export const TasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TasksApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of all evaluation tasks available in the system. Useful for building task selection interfaces. 
         * @summary List available tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTasks(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTasks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTasks(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.listTasks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TasksApi - factory interface
 * @export
 */
export const TasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TasksApiFp(configuration)
    return {
        /**
         * Retrieve a list of all evaluation tasks available in the system. Useful for building task selection interfaces. 
         * @summary List available tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTasks(options?: RawAxiosRequestConfig): AxiosPromise<ListTasks200Response> {
            return localVarFp.listTasks(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TasksApi - object-oriented interface
 * @export
 * @class TasksApi
 * @extends {BaseAPI}
 */
export class TasksApi extends BaseAPI {
    /**
     * Retrieve a list of all evaluation tasks available in the system. Useful for building task selection interfaces. 
     * @summary List available tasks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public listTasks(options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).listTasks(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ThresholdsApi - axios parameter creator
 * @export
 */
export const ThresholdsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve performance thresholds for multiple tasks and metrics in a single request. Useful for interpreting metric results across multiple tasks in a report. Supports filtering by specific tasks and metrics. 
         * @summary Get thresholds for multiple tasks and metrics
         * @param {string} tasks Comma-separated list of task IDs to get thresholds for
         * @param {string} [metrics] Comma-separated list of metric IDs to filter by (optional)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThresholds: async (tasks: string, metrics?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tasks' is not null or undefined
            assertParamExists('getThresholds', 'tasks', tasks)
            const localVarPath = `/thresholds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tasks !== undefined) {
                localVarQueryParameter['tasks'] = tasks;
            }

            if (metrics !== undefined) {
                localVarQueryParameter['metrics'] = metrics;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ThresholdsApi - functional programming interface
 * @export
 */
export const ThresholdsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ThresholdsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve performance thresholds for multiple tasks and metrics in a single request. Useful for interpreting metric results across multiple tasks in a report. Supports filtering by specific tasks and metrics. 
         * @summary Get thresholds for multiple tasks and metrics
         * @param {string} tasks Comma-separated list of task IDs to get thresholds for
         * @param {string} [metrics] Comma-separated list of metric IDs to filter by (optional)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getThresholds(tasks: string, metrics?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetThresholds200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getThresholds(tasks, metrics, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ThresholdsApi.getThresholds']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ThresholdsApi - factory interface
 * @export
 */
export const ThresholdsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ThresholdsApiFp(configuration)
    return {
        /**
         * Retrieve performance thresholds for multiple tasks and metrics in a single request. Useful for interpreting metric results across multiple tasks in a report. Supports filtering by specific tasks and metrics. 
         * @summary Get thresholds for multiple tasks and metrics
         * @param {string} tasks Comma-separated list of task IDs to get thresholds for
         * @param {string} [metrics] Comma-separated list of metric IDs to filter by (optional)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThresholds(tasks: string, metrics?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetThresholds200Response> {
            return localVarFp.getThresholds(tasks, metrics, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ThresholdsApi - object-oriented interface
 * @export
 * @class ThresholdsApi
 * @extends {BaseAPI}
 */
export class ThresholdsApi extends BaseAPI {
    /**
     * Retrieve performance thresholds for multiple tasks and metrics in a single request. Useful for interpreting metric results across multiple tasks in a report. Supports filtering by specific tasks and metrics. 
     * @summary Get thresholds for multiple tasks and metrics
     * @param {string} tasks Comma-separated list of task IDs to get thresholds for
     * @param {string} [metrics] Comma-separated list of metric IDs to filter by (optional)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThresholdsApi
     */
    public getThresholds(tasks: string, metrics?: string, options?: RawAxiosRequestConfig) {
        return ThresholdsApiFp(this.configuration).getThresholds(tasks, metrics, options).then((request) => request(this.axios, this.basePath));
    }
}



