/*
 * EvalGuard Reports API
 * API for accessing and querying model evaluation reports.  This API provides access to evaluation reports stored in the EvalGuard system, allowing clients to retrieve specific reports or query reports by various criteria such as model name, evaluation date, or task type. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.evalguard.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Schema to define interpretation thresholds for metric scores within a task context.
 */
@JsonPropertyOrder({
  Thresholdschema.JSON_PROPERTY_TASK,
  Thresholdschema.JSON_PROPERTY_THRESHOLDS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Thresholdschema {
  public static final String JSON_PROPERTY_TASK = "task";
  private String task;

  public static final String JSON_PROPERTY_THRESHOLDS = "thresholds";
  private Object thresholds;

  public Thresholdschema() { 
  }

  public Thresholdschema task(String task) {
    this.task = task;
    return this;
  }

   /**
   * Task ID to which these thresholds apply.
   * @return task
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TASK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTask() {
    return task;
  }


  @JsonProperty(JSON_PROPERTY_TASK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTask(String task) {
    this.task = task;
  }


  public Thresholdschema thresholds(Object thresholds) {
    this.thresholds = thresholds;
    return this;
  }

   /**
   * Mapping from metric IDs to arrays of threshold ranges and labels.
   * @return thresholds
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_THRESHOLDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getThresholds() {
    return thresholds;
  }


  @JsonProperty(JSON_PROPERTY_THRESHOLDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setThresholds(Object thresholds) {
    this.thresholds = thresholds;
  }


  /**
   * Return true if this thresholdschema object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Thresholdschema thresholdschema = (Thresholdschema) o;
    return Objects.equals(this.task, thresholdschema.task) &&
        Objects.equals(this.thresholds, thresholdschema.thresholds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(task, thresholds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Thresholdschema {\n");
    sb.append("    task: ").append(toIndentedString(task)).append("\n");
    sb.append("    thresholds: ").append(toIndentedString(thresholds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `task` to the URL query string
    if (getTask() != null) {
      joiner.add(String.format("%stask%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTask()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `thresholds` to the URL query string
    if (getThresholds() != null) {
      joiner.add(String.format("%sthresholds%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getThresholds()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

