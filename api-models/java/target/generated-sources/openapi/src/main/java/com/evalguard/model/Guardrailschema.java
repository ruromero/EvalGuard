/*
 * EvalGuard Reports API
 * API for accessing and querying model evaluation reports.  This API provides access to evaluation reports stored in the EvalGuard system, allowing clients to retrieve specific reports or query reports by various criteria such as model name, evaluation date, or task type. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.evalguard.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.evalguard.model.GuardrailTargetsInner;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * A guardrail is a policy or operational constraint that should be applied during  model evaluation or deployment to mitigate risks, enforce quality, or guide behavior.  It can target specific tasks, metrics, or models and is annotated with metadata for  interpretation and traceability. 
 */
@JsonPropertyOrder({
  Guardrailschema.JSON_PROPERTY_ID,
  Guardrailschema.JSON_PROPERTY_NAME,
  Guardrailschema.JSON_PROPERTY_DESCRIPTION,
  Guardrailschema.JSON_PROPERTY_TARGETS,
  Guardrailschema.JSON_PROPERTY_SCOPE,
  Guardrailschema.JSON_PROPERTY_EXTERNAL_REFERENCES,
  Guardrailschema.JSON_PROPERTY_INSTRUCTIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Guardrailschema {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_TARGETS = "targets";
  private List<GuardrailTargetsInner> targets = new ArrayList<>();

  /**
   * Indicates the data flow stage at which the guardrail should be applied: &#39;input&#39; for prompt/input constraints, &#39;output&#39; for generation constraints,  or &#39;both&#39; for end-to-end application. 
   */
  public enum ScopeEnum {
    INPUT("input"),
    
    OUTPUT("output"),
    
    BOTH("both");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ScopeEnum fromValue(String value) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SCOPE = "scope";
  private ScopeEnum scope;

  public static final String JSON_PROPERTY_EXTERNAL_REFERENCES = "external_references";
  private List<String> externalReferences;

  public static final String JSON_PROPERTY_INSTRUCTIONS = "instructions";
  private String instructions;

  public Guardrailschema() { 
  }

  public Guardrailschema id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Globally unique identifier for the guardrail.
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(String id) {
    this.id = id;
  }


  public Guardrailschema name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Human-readable name of the guardrail.
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public Guardrailschema description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Detailed explanation of the purpose and logic of the guardrail.
   * @return description
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public Guardrailschema targets(List<GuardrailTargetsInner> targets) {
    this.targets = targets;
    return this;
  }

  public Guardrailschema addTargetsItem(GuardrailTargetsInner targetsItem) {
    if (this.targets == null) {
      this.targets = new ArrayList<>();
    }
    this.targets.add(targetsItem);
    return this;
  }

   /**
   * Specifies what the guardrail applies to: tasks, metrics, and/or specific models. 
   * @return targets
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TARGETS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<GuardrailTargetsInner> getTargets() {
    return targets;
  }


  @JsonProperty(JSON_PROPERTY_TARGETS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTargets(List<GuardrailTargetsInner> targets) {
    this.targets = targets;
  }


  public Guardrailschema scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Indicates the data flow stage at which the guardrail should be applied: &#39;input&#39; for prompt/input constraints, &#39;output&#39; for generation constraints,  or &#39;both&#39; for end-to-end application. 
   * @return scope
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ScopeEnum getScope() {
    return scope;
  }


  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }


  public Guardrailschema externalReferences(List<String> externalReferences) {
    this.externalReferences = externalReferences;
    return this;
  }

  public Guardrailschema addExternalReferencesItem(String externalReferencesItem) {
    if (this.externalReferences == null) {
      this.externalReferences = new ArrayList<>();
    }
    this.externalReferences.add(externalReferencesItem);
    return this;
  }

   /**
   * List of external references (e.g., papers, documentation, implementations)  that support or explain the rationale for this guardrail. 
   * @return externalReferences
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTERNAL_REFERENCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getExternalReferences() {
    return externalReferences;
  }


  @JsonProperty(JSON_PROPERTY_EXTERNAL_REFERENCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExternalReferences(List<String> externalReferences) {
    this.externalReferences = externalReferences;
  }


  public Guardrailschema instructions(String instructions) {
    this.instructions = instructions;
    return this;
  }

   /**
   * Implementation guidance or rule description, written in natural language or  pseudocode for how to enforce this guardrail. 
   * @return instructions
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INSTRUCTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getInstructions() {
    return instructions;
  }


  @JsonProperty(JSON_PROPERTY_INSTRUCTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInstructions(String instructions) {
    this.instructions = instructions;
  }


  /**
   * Return true if this guardrailschema object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Guardrailschema guardrailschema = (Guardrailschema) o;
    return Objects.equals(this.id, guardrailschema.id) &&
        Objects.equals(this.name, guardrailschema.name) &&
        Objects.equals(this.description, guardrailschema.description) &&
        Objects.equals(this.targets, guardrailschema.targets) &&
        Objects.equals(this.scope, guardrailschema.scope) &&
        Objects.equals(this.externalReferences, guardrailschema.externalReferences) &&
        Objects.equals(this.instructions, guardrailschema.instructions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, targets, scope, externalReferences, instructions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Guardrailschema {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    externalReferences: ").append(toIndentedString(externalReferences)).append("\n");
    sb.append("    instructions: ").append(toIndentedString(instructions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `targets` to the URL query string
    if (getTargets() != null) {
      for (int i = 0; i < getTargets().size(); i++) {
        if (getTargets().get(i) != null) {
          joiner.add(getTargets().get(i).toUrlQueryString(String.format("%stargets%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `scope` to the URL query string
    if (getScope() != null) {
      joiner.add(String.format("%sscope%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getScope()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `external_references` to the URL query string
    if (getExternalReferences() != null) {
      for (int i = 0; i < getExternalReferences().size(); i++) {
        joiner.add(String.format("%sexternal_references%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getExternalReferences().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `instructions` to the URL query string
    if (getInstructions() != null) {
      joiner.add(String.format("%sinstructions%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInstructions()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

