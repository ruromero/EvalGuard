/*
 * EvalGuard Reports API
 * API for accessing and querying model evaluation reports.  This API provides access to evaluation reports stored in the EvalGuard system, allowing clients to retrieve specific reports or query reports by various criteria such as model name, evaluation date, or task type. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.evalguard.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.evalguard.model.ReportContextExecution;
import com.evalguard.model.ReportContextTools;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Contextual information about the report generation.
 */
@JsonPropertyOrder({
  ReportContext.JSON_PROPERTY_MODEL_NAME,
  ReportContext.JSON_PROPERTY_MODEL_SOURCE,
  ReportContext.JSON_PROPERTY_GIT_HASH,
  ReportContext.JSON_PROPERTY_DATE,
  ReportContext.JSON_PROPERTY_EXECUTION,
  ReportContext.JSON_PROPERTY_TOOLS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReportContext {
  public static final String JSON_PROPERTY_MODEL_NAME = "model_name";
  private String modelName;

  public static final String JSON_PROPERTY_MODEL_SOURCE = "model_source";
  private String modelSource;

  public static final String JSON_PROPERTY_GIT_HASH = "git_hash";
  private String gitHash;

  public static final String JSON_PROPERTY_DATE = "date";
  private BigDecimal date;

  public static final String JSON_PROPERTY_EXECUTION = "execution";
  private ReportContextExecution execution;

  public static final String JSON_PROPERTY_TOOLS = "tools";
  private ReportContextTools tools;

  public ReportContext() { 
  }

  public ReportContext modelName(String modelName) {
    this.modelName = modelName;
    return this;
  }

   /**
   * Name of the model being evaluated.
   * @return modelName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODEL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getModelName() {
    return modelName;
  }


  @JsonProperty(JSON_PROPERTY_MODEL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModelName(String modelName) {
    this.modelName = modelName;
  }


  public ReportContext modelSource(String modelSource) {
    this.modelSource = modelSource;
    return this;
  }

   /**
   * Version of the model being evaluated.
   * @return modelSource
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODEL_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getModelSource() {
    return modelSource;
  }


  @JsonProperty(JSON_PROPERTY_MODEL_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModelSource(String modelSource) {
    this.modelSource = modelSource;
  }


  public ReportContext gitHash(String gitHash) {
    this.gitHash = gitHash;
    return this;
  }

   /**
   * Git hash of the model being evaluated.
   * @return gitHash
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GIT_HASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGitHash() {
    return gitHash;
  }


  @JsonProperty(JSON_PROPERTY_GIT_HASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGitHash(String gitHash) {
    this.gitHash = gitHash;
  }


  public ReportContext date(BigDecimal date) {
    this.date = date;
    return this;
  }

   /**
   * Timestamp of the report generation.
   * @return date
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDate(BigDecimal date) {
    this.date = date;
  }


  public ReportContext execution(ReportContextExecution execution) {
    this.execution = execution;
    return this;
  }

   /**
   * Get execution
   * @return execution
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXECUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ReportContextExecution getExecution() {
    return execution;
  }


  @JsonProperty(JSON_PROPERTY_EXECUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExecution(ReportContextExecution execution) {
    this.execution = execution;
  }


  public ReportContext tools(ReportContextTools tools) {
    this.tools = tools;
    return this;
  }

   /**
   * Get tools
   * @return tools
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOOLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ReportContextTools getTools() {
    return tools;
  }


  @JsonProperty(JSON_PROPERTY_TOOLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTools(ReportContextTools tools) {
    this.tools = tools;
  }


  /**
   * Return true if this Report_context object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportContext reportContext = (ReportContext) o;
    return Objects.equals(this.modelName, reportContext.modelName) &&
        Objects.equals(this.modelSource, reportContext.modelSource) &&
        Objects.equals(this.gitHash, reportContext.gitHash) &&
        Objects.equals(this.date, reportContext.date) &&
        Objects.equals(this.execution, reportContext.execution) &&
        Objects.equals(this.tools, reportContext.tools);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modelName, modelSource, gitHash, date, execution, tools);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportContext {\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("    modelSource: ").append(toIndentedString(modelSource)).append("\n");
    sb.append("    gitHash: ").append(toIndentedString(gitHash)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    execution: ").append(toIndentedString(execution)).append("\n");
    sb.append("    tools: ").append(toIndentedString(tools)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `model_name` to the URL query string
    if (getModelName() != null) {
      joiner.add(String.format("%smodel_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getModelName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `model_source` to the URL query string
    if (getModelSource() != null) {
      joiner.add(String.format("%smodel_source%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getModelSource()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `git_hash` to the URL query string
    if (getGitHash() != null) {
      joiner.add(String.format("%sgit_hash%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGitHash()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `date` to the URL query string
    if (getDate() != null) {
      joiner.add(String.format("%sdate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDate()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `execution` to the URL query string
    if (getExecution() != null) {
      joiner.add(getExecution().toUrlQueryString(prefix + "execution" + suffix));
    }

    // add `tools` to the URL query string
    if (getTools() != null) {
      joiner.add(getTools().toUrlQueryString(prefix + "tools" + suffix));
    }

    return joiner.toString();
  }
}

