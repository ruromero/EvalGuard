/*
 * EvalGuard Reports API
 * API for accessing and querying model evaluation reports.  This API provides access to evaluation reports stored in the EvalGuard system, allowing clients to retrieve specific reports or query reports by various criteria such as model name, evaluation date, or task type. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.evalguard.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.evalguard.model.ReportContextToolsLmEval;
import com.evalguard.model.ReportContextToolsTransformers;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Tools used to generate the report.
 */
@JsonPropertyOrder({
  ReportContextTools.JSON_PROPERTY_LM_EVAL,
  ReportContextTools.JSON_PROPERTY_TRANSFORMERS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReportContextTools {
  public static final String JSON_PROPERTY_LM_EVAL = "lm_eval";
  private ReportContextToolsLmEval lmEval;

  public static final String JSON_PROPERTY_TRANSFORMERS = "transformers";
  private ReportContextToolsTransformers transformers;

  public ReportContextTools() { 
  }

  public ReportContextTools lmEval(ReportContextToolsLmEval lmEval) {
    this.lmEval = lmEval;
    return this;
  }

   /**
   * Get lmEval
   * @return lmEval
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LM_EVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ReportContextToolsLmEval getLmEval() {
    return lmEval;
  }


  @JsonProperty(JSON_PROPERTY_LM_EVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLmEval(ReportContextToolsLmEval lmEval) {
    this.lmEval = lmEval;
  }


  public ReportContextTools transformers(ReportContextToolsTransformers transformers) {
    this.transformers = transformers;
    return this;
  }

   /**
   * Get transformers
   * @return transformers
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSFORMERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ReportContextToolsTransformers getTransformers() {
    return transformers;
  }


  @JsonProperty(JSON_PROPERTY_TRANSFORMERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransformers(ReportContextToolsTransformers transformers) {
    this.transformers = transformers;
  }


  /**
   * Return true if this Report_context_tools object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportContextTools reportContextTools = (ReportContextTools) o;
    return Objects.equals(this.lmEval, reportContextTools.lmEval) &&
        Objects.equals(this.transformers, reportContextTools.transformers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lmEval, transformers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportContextTools {\n");
    sb.append("    lmEval: ").append(toIndentedString(lmEval)).append("\n");
    sb.append("    transformers: ").append(toIndentedString(transformers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `lm_eval` to the URL query string
    if (getLmEval() != null) {
      joiner.add(getLmEval().toUrlQueryString(prefix + "lm_eval" + suffix));
    }

    // add `transformers` to the URL query string
    if (getTransformers() != null) {
      joiner.add(getTransformers().toUrlQueryString(prefix + "transformers" + suffix));
    }

    return joiner.toString();
  }
}

