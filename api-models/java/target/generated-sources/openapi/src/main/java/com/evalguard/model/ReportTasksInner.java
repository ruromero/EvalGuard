/*
 * EvalGuard Reports API
 * API for accessing and querying model evaluation reports.  This API provides access to evaluation reports stored in the EvalGuard system, allowing clients to retrieve specific reports or query reports by various criteria such as model name, evaluation date, or task type. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.evalguard.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.evalguard.model.ReportTasksInnerNSamples;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ReportTasksInner
 */
@JsonPropertyOrder({
  ReportTasksInner.JSON_PROPERTY_TASK_REF,
  ReportTasksInner.JSON_PROPERTY_DATASET_PATH,
  ReportTasksInner.JSON_PROPERTY_DATASET_NAME,
  ReportTasksInner.JSON_PROPERTY_OUTPUT_TYPE,
  ReportTasksInner.JSON_PROPERTY_REPEATS,
  ReportTasksInner.JSON_PROPERTY_SHOULD_DECONTAMINATE,
  ReportTasksInner.JSON_PROPERTY_UNSAFE_CODE,
  ReportTasksInner.JSON_PROPERTY_N_SHOT,
  ReportTasksInner.JSON_PROPERTY_N_SAMPLES,
  ReportTasksInner.JSON_PROPERTY_VERSION,
  ReportTasksInner.JSON_PROPERTY_METADATA
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReportTasksInner {
  public static final String JSON_PROPERTY_TASK_REF = "task_ref";
  private String taskRef;

  public static final String JSON_PROPERTY_DATASET_PATH = "dataset_path";
  private String datasetPath;

  public static final String JSON_PROPERTY_DATASET_NAME = "dataset_name";
  private String datasetName;

  public static final String JSON_PROPERTY_OUTPUT_TYPE = "output_type";
  private String outputType;

  public static final String JSON_PROPERTY_REPEATS = "repeats";
  private BigDecimal repeats;

  public static final String JSON_PROPERTY_SHOULD_DECONTAMINATE = "should_decontaminate";
  private Boolean shouldDecontaminate;

  public static final String JSON_PROPERTY_UNSAFE_CODE = "unsafe_code";
  private Boolean unsafeCode;

  public static final String JSON_PROPERTY_N_SHOT = "n_shot";
  private BigDecimal nShot;

  public static final String JSON_PROPERTY_N_SAMPLES = "n_samples";
  private ReportTasksInnerNSamples nSamples;

  public static final String JSON_PROPERTY_VERSION = "version";
  private BigDecimal version;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  private Map<String, String> metadata = new HashMap<>();

  public ReportTasksInner() { 
  }

  public ReportTasksInner taskRef(String taskRef) {
    this.taskRef = taskRef;
    return this;
  }

   /**
   * Reference to the task.
   * @return taskRef
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TASK_REF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaskRef() {
    return taskRef;
  }


  @JsonProperty(JSON_PROPERTY_TASK_REF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaskRef(String taskRef) {
    this.taskRef = taskRef;
  }


  public ReportTasksInner datasetPath(String datasetPath) {
    this.datasetPath = datasetPath;
    return this;
  }

   /**
   * Path to the dataset.
   * @return datasetPath
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATASET_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDatasetPath() {
    return datasetPath;
  }


  @JsonProperty(JSON_PROPERTY_DATASET_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDatasetPath(String datasetPath) {
    this.datasetPath = datasetPath;
  }


  public ReportTasksInner datasetName(String datasetName) {
    this.datasetName = datasetName;
    return this;
  }

   /**
   * Name of the dataset.
   * @return datasetName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATASET_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDatasetName() {
    return datasetName;
  }


  @JsonProperty(JSON_PROPERTY_DATASET_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDatasetName(String datasetName) {
    this.datasetName = datasetName;
  }


  public ReportTasksInner outputType(String outputType) {
    this.outputType = outputType;
    return this;
  }

   /**
   * Type of the output.
   * @return outputType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTPUT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOutputType() {
    return outputType;
  }


  @JsonProperty(JSON_PROPERTY_OUTPUT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutputType(String outputType) {
    this.outputType = outputType;
  }


  public ReportTasksInner repeats(BigDecimal repeats) {
    this.repeats = repeats;
    return this;
  }

   /**
   * Number of times the task was repeated.
   * @return repeats
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPEATS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getRepeats() {
    return repeats;
  }


  @JsonProperty(JSON_PROPERTY_REPEATS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRepeats(BigDecimal repeats) {
    this.repeats = repeats;
  }


  public ReportTasksInner shouldDecontaminate(Boolean shouldDecontaminate) {
    this.shouldDecontaminate = shouldDecontaminate;
    return this;
  }

   /**
   * Whether to decontaminate the task.
   * @return shouldDecontaminate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHOULD_DECONTAMINATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getShouldDecontaminate() {
    return shouldDecontaminate;
  }


  @JsonProperty(JSON_PROPERTY_SHOULD_DECONTAMINATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShouldDecontaminate(Boolean shouldDecontaminate) {
    this.shouldDecontaminate = shouldDecontaminate;
  }


  public ReportTasksInner unsafeCode(Boolean unsafeCode) {
    this.unsafeCode = unsafeCode;
    return this;
  }

   /**
   * Whether the task contains unsafe code.
   * @return unsafeCode
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNSAFE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUnsafeCode() {
    return unsafeCode;
  }


  @JsonProperty(JSON_PROPERTY_UNSAFE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnsafeCode(Boolean unsafeCode) {
    this.unsafeCode = unsafeCode;
  }


  public ReportTasksInner nShot(BigDecimal nShot) {
    this.nShot = nShot;
    return this;
  }

   /**
   * Number of shots in the task.
   * @return nShot
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_N_SHOT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getnShot() {
    return nShot;
  }


  @JsonProperty(JSON_PROPERTY_N_SHOT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setnShot(BigDecimal nShot) {
    this.nShot = nShot;
  }


  public ReportTasksInner nSamples(ReportTasksInnerNSamples nSamples) {
    this.nSamples = nSamples;
    return this;
  }

   /**
   * Get nSamples
   * @return nSamples
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_N_SAMPLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ReportTasksInnerNSamples getnSamples() {
    return nSamples;
  }


  @JsonProperty(JSON_PROPERTY_N_SAMPLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setnSamples(ReportTasksInnerNSamples nSamples) {
    this.nSamples = nSamples;
  }


  public ReportTasksInner version(BigDecimal version) {
    this.version = version;
    return this;
  }

   /**
   * Version of the task result.
   * @return version
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(BigDecimal version) {
    this.version = version;
  }


  public ReportTasksInner metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public ReportTasksInner putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * Metadata about the task result.
   * @return metadata
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  /**
   * Return true if this Report_tasks_inner object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportTasksInner reportTasksInner = (ReportTasksInner) o;
    return Objects.equals(this.taskRef, reportTasksInner.taskRef) &&
        Objects.equals(this.datasetPath, reportTasksInner.datasetPath) &&
        Objects.equals(this.datasetName, reportTasksInner.datasetName) &&
        Objects.equals(this.outputType, reportTasksInner.outputType) &&
        Objects.equals(this.repeats, reportTasksInner.repeats) &&
        Objects.equals(this.shouldDecontaminate, reportTasksInner.shouldDecontaminate) &&
        Objects.equals(this.unsafeCode, reportTasksInner.unsafeCode) &&
        Objects.equals(this.nShot, reportTasksInner.nShot) &&
        Objects.equals(this.nSamples, reportTasksInner.nSamples) &&
        Objects.equals(this.version, reportTasksInner.version) &&
        Objects.equals(this.metadata, reportTasksInner.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(taskRef, datasetPath, datasetName, outputType, repeats, shouldDecontaminate, unsafeCode, nShot, nSamples, version, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportTasksInner {\n");
    sb.append("    taskRef: ").append(toIndentedString(taskRef)).append("\n");
    sb.append("    datasetPath: ").append(toIndentedString(datasetPath)).append("\n");
    sb.append("    datasetName: ").append(toIndentedString(datasetName)).append("\n");
    sb.append("    outputType: ").append(toIndentedString(outputType)).append("\n");
    sb.append("    repeats: ").append(toIndentedString(repeats)).append("\n");
    sb.append("    shouldDecontaminate: ").append(toIndentedString(shouldDecontaminate)).append("\n");
    sb.append("    unsafeCode: ").append(toIndentedString(unsafeCode)).append("\n");
    sb.append("    nShot: ").append(toIndentedString(nShot)).append("\n");
    sb.append("    nSamples: ").append(toIndentedString(nSamples)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `task_ref` to the URL query string
    if (getTaskRef() != null) {
      joiner.add(String.format("%stask_ref%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTaskRef()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `dataset_path` to the URL query string
    if (getDatasetPath() != null) {
      joiner.add(String.format("%sdataset_path%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDatasetPath()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `dataset_name` to the URL query string
    if (getDatasetName() != null) {
      joiner.add(String.format("%sdataset_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDatasetName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `output_type` to the URL query string
    if (getOutputType() != null) {
      joiner.add(String.format("%soutput_type%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOutputType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `repeats` to the URL query string
    if (getRepeats() != null) {
      joiner.add(String.format("%srepeats%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRepeats()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `should_decontaminate` to the URL query string
    if (getShouldDecontaminate() != null) {
      joiner.add(String.format("%sshould_decontaminate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getShouldDecontaminate()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `unsafe_code` to the URL query string
    if (getUnsafeCode() != null) {
      joiner.add(String.format("%sunsafe_code%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUnsafeCode()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `n_shot` to the URL query string
    if (getnShot() != null) {
      joiner.add(String.format("%sn_shot%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getnShot()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `n_samples` to the URL query string
    if (getnSamples() != null) {
      joiner.add(getnSamples().toUrlQueryString(prefix + "n_samples" + suffix));
    }

    // add `version` to the URL query string
    if (getVersion() != null) {
      joiner.add(String.format("%sversion%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVersion()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `metadata` to the URL query string
    if (getMetadata() != null) {
      for (String _key : getMetadata().keySet()) {
        joiner.add(String.format("%smetadata%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getMetadata().get(_key), URLEncoder.encode(String.valueOf(getMetadata().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

