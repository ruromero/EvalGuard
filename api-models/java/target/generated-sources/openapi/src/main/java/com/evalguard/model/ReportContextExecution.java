/*
 * EvalGuard Reports API
 * API for accessing and querying model evaluation reports.  This API provides access to evaluation reports stored in the EvalGuard system, allowing clients to retrieve specific reports or query reports by various criteria such as model name, evaluation date, or task type. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.evalguard.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Execution information about the report generation.
 */
@JsonPropertyOrder({
  ReportContextExecution.JSON_PROPERTY_MODEL_ARGS_PLAIN,
  ReportContextExecution.JSON_PROPERTY_MODEL_ARGS_DICT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReportContextExecution {
  public static final String JSON_PROPERTY_MODEL_ARGS_PLAIN = "model_args_plain";
  private String modelArgsPlain;

  public static final String JSON_PROPERTY_MODEL_ARGS_DICT = "model_args_dict";
  private Map<String, String> modelArgsDict = new HashMap<>();

  public ReportContextExecution() { 
  }

  public ReportContextExecution modelArgsPlain(String modelArgsPlain) {
    this.modelArgsPlain = modelArgsPlain;
    return this;
  }

   /**
   * Arguments used to instantiate the model.
   * @return modelArgsPlain
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODEL_ARGS_PLAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getModelArgsPlain() {
    return modelArgsPlain;
  }


  @JsonProperty(JSON_PROPERTY_MODEL_ARGS_PLAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModelArgsPlain(String modelArgsPlain) {
    this.modelArgsPlain = modelArgsPlain;
  }


  public ReportContextExecution modelArgsDict(Map<String, String> modelArgsDict) {
    this.modelArgsDict = modelArgsDict;
    return this;
  }

  public ReportContextExecution putModelArgsDictItem(String key, String modelArgsDictItem) {
    if (this.modelArgsDict == null) {
      this.modelArgsDict = new HashMap<>();
    }
    this.modelArgsDict.put(key, modelArgsDictItem);
    return this;
  }

   /**
   * Arguments used to instantiate the model.
   * @return modelArgsDict
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODEL_ARGS_DICT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getModelArgsDict() {
    return modelArgsDict;
  }


  @JsonProperty(JSON_PROPERTY_MODEL_ARGS_DICT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModelArgsDict(Map<String, String> modelArgsDict) {
    this.modelArgsDict = modelArgsDict;
  }


  /**
   * Return true if this Report_context_execution object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportContextExecution reportContextExecution = (ReportContextExecution) o;
    return Objects.equals(this.modelArgsPlain, reportContextExecution.modelArgsPlain) &&
        Objects.equals(this.modelArgsDict, reportContextExecution.modelArgsDict);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modelArgsPlain, modelArgsDict);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportContextExecution {\n");
    sb.append("    modelArgsPlain: ").append(toIndentedString(modelArgsPlain)).append("\n");
    sb.append("    modelArgsDict: ").append(toIndentedString(modelArgsDict)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `model_args_plain` to the URL query string
    if (getModelArgsPlain() != null) {
      joiner.add(String.format("%smodel_args_plain%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getModelArgsPlain()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `model_args_dict` to the URL query string
    if (getModelArgsDict() != null) {
      for (String _key : getModelArgsDict().keySet()) {
        joiner.add(String.format("%smodel_args_dict%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getModelArgsDict().get(_key), URLEncoder.encode(String.valueOf(getModelArgsDict().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

