/*
 * EvalGuard Reports API
 * API for accessing and querying model evaluation reports.  This API provides access to evaluation reports stored in the EvalGuard system, allowing clients to retrieve specific reports or query reports by various criteria such as model name, evaluation date, or task type. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.evalguard.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.evalguard.model.Threshold;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * GetThresholds200Response
 */
@JsonPropertyOrder({
  GetThresholds200Response.JSON_PROPERTY_THRESHOLDS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GetThresholds200Response {
  public static final String JSON_PROPERTY_THRESHOLDS = "thresholds";
  private List<Threshold> thresholds;

  public GetThresholds200Response() { 
  }

  public GetThresholds200Response thresholds(List<Threshold> thresholds) {
    this.thresholds = thresholds;
    return this;
  }

  public GetThresholds200Response addThresholdsItem(Threshold thresholdsItem) {
    if (this.thresholds == null) {
      this.thresholds = new ArrayList<>();
    }
    this.thresholds.add(thresholdsItem);
    return this;
  }

   /**
   * Get thresholds
   * @return thresholds
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THRESHOLDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Threshold> getThresholds() {
    return thresholds;
  }


  @JsonProperty(JSON_PROPERTY_THRESHOLDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThresholds(List<Threshold> thresholds) {
    this.thresholds = thresholds;
  }


  /**
   * Return true if this getThresholds_200_response object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetThresholds200Response getThresholds200Response = (GetThresholds200Response) o;
    return Objects.equals(this.thresholds, getThresholds200Response.thresholds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(thresholds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetThresholds200Response {\n");
    sb.append("    thresholds: ").append(toIndentedString(thresholds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `thresholds` to the URL query string
    if (getThresholds() != null) {
      for (int i = 0; i < getThresholds().size(); i++) {
        if (getThresholds().get(i) != null) {
          joiner.add(getThresholds().get(i).toUrlQueryString(String.format("%sthresholds%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

