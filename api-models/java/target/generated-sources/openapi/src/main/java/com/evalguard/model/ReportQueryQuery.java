/*
 * EvalGuard Reports API
 * API for accessing and querying model evaluation reports.  This API provides access to evaluation reports stored in the EvalGuard system, allowing clients to retrieve specific reports or query reports by various criteria such as model name, evaluation date, or task type. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.evalguard.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ReportQueryQuery
 */
@JsonPropertyOrder({
  ReportQueryQuery.JSON_PROPERTY_MODEL_NAME,
  ReportQueryQuery.JSON_PROPERTY_MODEL_SOURCE,
  ReportQueryQuery.JSON_PROPERTY_TASKS,
  ReportQueryQuery.JSON_PROPERTY_METRICS,
  ReportQueryQuery.JSON_PROPERTY_REPORT_CONTEXT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReportQueryQuery {
  public static final String JSON_PROPERTY_MODEL_NAME = "model_name";
  private String modelName;

  public static final String JSON_PROPERTY_MODEL_SOURCE = "model_source";
  private String modelSource;

  public static final String JSON_PROPERTY_TASKS = "tasks";
  private List<String> tasks;

  public static final String JSON_PROPERTY_METRICS = "metrics";
  private List<String> metrics;

  public static final String JSON_PROPERTY_REPORT_CONTEXT = "report_context";
  private Map<String, Object> reportContext = new HashMap<>();

  public ReportQueryQuery() { 
  }

  public ReportQueryQuery modelName(String modelName) {
    this.modelName = modelName;
    return this;
  }

   /**
   * Filter reports by model name (exact match)
   * @return modelName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODEL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getModelName() {
    return modelName;
  }


  @JsonProperty(JSON_PROPERTY_MODEL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModelName(String modelName) {
    this.modelName = modelName;
  }


  public ReportQueryQuery modelSource(String modelSource) {
    this.modelSource = modelSource;
    return this;
  }

   /**
   * Filter reports by model source/organization
   * @return modelSource
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODEL_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getModelSource() {
    return modelSource;
  }


  @JsonProperty(JSON_PROPERTY_MODEL_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModelSource(String modelSource) {
    this.modelSource = modelSource;
  }


  public ReportQueryQuery tasks(List<String> tasks) {
    this.tasks = tasks;
    return this;
  }

  public ReportQueryQuery addTasksItem(String tasksItem) {
    if (this.tasks == null) {
      this.tasks = new ArrayList<>();
    }
    this.tasks.add(tasksItem);
    return this;
  }

   /**
   * Filter reports containing specific tasks
   * @return tasks
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getTasks() {
    return tasks;
  }


  @JsonProperty(JSON_PROPERTY_TASKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTasks(List<String> tasks) {
    this.tasks = tasks;
  }


  public ReportQueryQuery metrics(List<String> metrics) {
    this.metrics = metrics;
    return this;
  }

  public ReportQueryQuery addMetricsItem(String metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

   /**
   * Filter reports containing specific metrics
   * @return metrics
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METRICS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getMetrics() {
    return metrics;
  }


  @JsonProperty(JSON_PROPERTY_METRICS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetrics(List<String> metrics) {
    this.metrics = metrics;
  }


  public ReportQueryQuery reportContext(Map<String, Object> reportContext) {
    this.reportContext = reportContext;
    return this;
  }

  public ReportQueryQuery putReportContextItem(String key, Object reportContextItem) {
    if (this.reportContext == null) {
      this.reportContext = new HashMap<>();
    }
    this.reportContext.put(key, reportContextItem);
    return this;
  }

   /**
   * Filter by specific parameters used for generating the report
   * @return reportContext
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPORT_CONTEXT)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getReportContext() {
    return reportContext;
  }


  @JsonProperty(JSON_PROPERTY_REPORT_CONTEXT)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)
  public void setReportContext(Map<String, Object> reportContext) {
    this.reportContext = reportContext;
  }


  /**
   * Return true if this ReportQuery_query object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportQueryQuery reportQueryQuery = (ReportQueryQuery) o;
    return Objects.equals(this.modelName, reportQueryQuery.modelName) &&
        Objects.equals(this.modelSource, reportQueryQuery.modelSource) &&
        Objects.equals(this.tasks, reportQueryQuery.tasks) &&
        Objects.equals(this.metrics, reportQueryQuery.metrics) &&
        Objects.equals(this.reportContext, reportQueryQuery.reportContext);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modelName, modelSource, tasks, metrics, reportContext);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportQueryQuery {\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("    modelSource: ").append(toIndentedString(modelSource)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    reportContext: ").append(toIndentedString(reportContext)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `model_name` to the URL query string
    if (getModelName() != null) {
      joiner.add(String.format("%smodel_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getModelName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `model_source` to the URL query string
    if (getModelSource() != null) {
      joiner.add(String.format("%smodel_source%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getModelSource()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `tasks` to the URL query string
    if (getTasks() != null) {
      for (int i = 0; i < getTasks().size(); i++) {
        joiner.add(String.format("%stasks%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getTasks().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `metrics` to the URL query string
    if (getMetrics() != null) {
      for (int i = 0; i < getMetrics().size(); i++) {
        joiner.add(String.format("%smetrics%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getMetrics().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `report_context` to the URL query string
    if (getReportContext() != null) {
      for (String _key : getReportContext().keySet()) {
        joiner.add(String.format("%sreport_context%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getReportContext().get(_key), URLEncoder.encode(String.valueOf(getReportContext().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

