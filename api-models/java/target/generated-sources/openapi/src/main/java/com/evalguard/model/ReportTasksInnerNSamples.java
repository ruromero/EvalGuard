/*
 * EvalGuard Reports API
 * API for accessing and querying model evaluation reports.  This API provides access to evaluation reports stored in the EvalGuard system, allowing clients to retrieve specific reports or query reports by various criteria such as model name, evaluation date, or task type. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.evalguard.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Number of samples in the task.
 */
@JsonPropertyOrder({
  ReportTasksInnerNSamples.JSON_PROPERTY_ORIGINAL,
  ReportTasksInnerNSamples.JSON_PROPERTY_EFFECTIVE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReportTasksInnerNSamples {
  public static final String JSON_PROPERTY_ORIGINAL = "original";
  private BigDecimal original;

  public static final String JSON_PROPERTY_EFFECTIVE = "effective";
  private BigDecimal effective;

  public ReportTasksInnerNSamples() { 
  }

  public ReportTasksInnerNSamples original(BigDecimal original) {
    this.original = original;
    return this;
  }

   /**
   * Number of original samples.
   * @return original
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORIGINAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getOriginal() {
    return original;
  }


  @JsonProperty(JSON_PROPERTY_ORIGINAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOriginal(BigDecimal original) {
    this.original = original;
  }


  public ReportTasksInnerNSamples effective(BigDecimal effective) {
    this.effective = effective;
    return this;
  }

   /**
   * Number of effective samples.
   * @return effective
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EFFECTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getEffective() {
    return effective;
  }


  @JsonProperty(JSON_PROPERTY_EFFECTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEffective(BigDecimal effective) {
    this.effective = effective;
  }


  /**
   * Return true if this Report_tasks_inner_n_samples object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportTasksInnerNSamples reportTasksInnerNSamples = (ReportTasksInnerNSamples) o;
    return Objects.equals(this.original, reportTasksInnerNSamples.original) &&
        Objects.equals(this.effective, reportTasksInnerNSamples.effective);
  }

  @Override
  public int hashCode() {
    return Objects.hash(original, effective);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportTasksInnerNSamples {\n");
    sb.append("    original: ").append(toIndentedString(original)).append("\n");
    sb.append("    effective: ").append(toIndentedString(effective)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `original` to the URL query string
    if (getOriginal() != null) {
      joiner.add(String.format("%soriginal%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOriginal()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `effective` to the URL query string
    if (getEffective() != null) {
      joiner.add(String.format("%seffective%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEffective()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

